version: "3.8"

services:
  db:
    image: postgres:15
    container_name: infra-db-1
    restart: always
    environment:
      POSTGRES_DB: arescore
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    secrets:
      - postgres_user
      - postgres_password
    networks:
      - db_net
    # Optional: Use the official Postgres healthcheck
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      retries: 3

  incident_manager:
    build: ../incident_manager
    container_name: incident_manager
    restart: always
    environment:
      PORT: 8001
      LOG_INDEXER_URL_FILE: /run/secrets/log_indexer_url
    secrets:
      - log_indexer_url
    ports:
      - "8001:8001"
    networks:
      - sentinel_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      retries: 3

  sentinelcore-ai:
    build: ../sentinelcore-ai
    container_name: sentinelcore-ai
    restart: always
    environment:
      INCIDENT_MANAGER_URL_FILE: /run/secrets/incident_manager_url
      LOG_INDEXER_URL_FILE: /run/secrets/log_indexer_url
    ports:
      - "8000:8000"
    depends_on:
      - incident_manager
    networks:
      - sentinel_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      retries: 3
    secrets:
      - incident_manager_url
      - log_indexer_url

  log_indexer:
    build: ../log_indexer
    container_name: log_indexer
    restart: always
    ports:
      - "8002:8000"
    volumes:
      - log-data:/var/lib/log_indexer
    networks:
      - sentinel_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      retries: 3

  report_exporter:
    build:
      context: ../report_exporter
      dockerfile: Dockerfile
    container_name: report_exporter
    restart: always
    environment:
      LOG_INDEXER_URL_FILE: /run/secrets/log_indexer_url
    ports:
      - "8003:8000"
    networks:
      - sentinel_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      retries: 3
    secrets:
      - log_indexer_url
  
  backend:
    build: ../backend
    container_name: backend
    restart: always
    environment:
      LOG_INDEXER_URL_FILE: /run/secrets/log_indexer_url
    ports:
      - "8005:8000"
    networks:
      - sentinel_net
      - db_net
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      retries: 3
    secrets:
      - log_indexer_url

  self_healing_supervisor:
    image: python:3.11-slim
    container_name: self_healing_supervisor
    restart: always
    volumes:
      - ./self_healing_supervisor.py:/app/self_healing_supervisor.py
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      SUPERVISE_TARGETS: "incident_manager=http://incident_manager:8001/health,sentinelcore-ai=http://sentinelcore-ai:8000/health,log_indexer=http://log_indexer:8000/health,report_exporter=http://report_exporter:8000/health,backend=http://backend:8000/health"
    command: ["python", "/app/self_healing_supervisor.py"]
    depends_on:
      - incident_manager
      - sentinelcore-ai
      - log_indexer
      - report_exporter
      - backend
    networks:
      - sentinel_net

volumes:
  db-data:
    driver: local
  # Do not remove unless migrating to OpenSearch. All local/demo logs persist across container restarts.
  log-data:
    driver: local

secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
  log_indexer_url:
    external: true
  incident_manager_url:
    external: true

networks:
  sentinel_net:
  db_net:
